{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b><em><center>Project</center></em><b>\n",
    "    <h1><b><center>The Alternative 2021 Olympic Games Medal Table</center></b><h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"https://www.grunge.com/img/gallery/what-do-the-olympic-rings-actually-stand-for/intro-1624376933.webp\" alt=\"Olympic logo\" width=\"500\" height=\"350\" > "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>|| 1 Research Problem<h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> | 1.1 Debates Around the Olympic Ranking System <h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In a 24 August 2008 news conference, the International Olympic Committee (IOC) President Jacques Rogge confirmed that the IOC does not have a view on any particular ranking system. Despite that, it is rather common in the media to leverage the total medal count, particularly gold, to rank the teams.<br>\n",
    "\n",
    "This unofficial ranking method is prevalent among the general public that is not concerned with the nuances of the Olympic awarding system. This is unfair for small countries with, obviously, fewer athletes and smaller economies.<br>\n",
    "\n",
    "The 1930 Olympic charter declared that \"In the Olympic Games there is no classification according to points\". It stated that the country-based organisation of teams is \"chiefly for practical convenience\" and that country rankings are \"a grave injustice on the smaller countries\". <br>\n",
    "\n",
    "By ranking the teams the conventional (unofficial) way, smaller nations get overlooked and their performance underestimated. The large economies, on the other hand, keep an almost fixed place in the rank throughout the years. Nevertheless, a few statisticians from the UK worked out and implemented an alternative, fairer ranking system that takes into account the size and the prosperity of the countries.<br>\n",
    "\n",
    "In a 2012 The Guardian article, an alternative medal table was presented. The teams were reranked based on the team size, the GDP and the size of the population of their countries. In essence, the total medal number for each country was multiplied by a coefficient to either “reward” or “penalise” a team according to its nation’s economy or population size.<br>\n",
    "\n",
    "Although some countries like, for example, Russia, still kept a high position in the table, the medal table had changed drastically in favour of the smaller countries.<br>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> | 1.2 Project objectives <h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will try to use a similar approach to that used by the statisticians for the 2012 Olympic games to create a \"fair\", alternative medal table for the Olympic games 2021.<br><br>\n",
    "In addition to that, we will carry out an analysis of how demographic and economic factors influence Olympic performance. In particular, we will check whether there is any clear correlation between GDP per capita and athletic fitness. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Hypothesis</h3><br>\n",
    "Let us assume that a nation’s economic prosperity has a direct influence on its athletes' performance. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>|| 2 Data <h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For answering our questions, we will require the following datasets:\n",
    "<ul>\n",
    "    <li>Olympic Games 2021 results.(International Olympic Committee)</li>\n",
    "    <li>Global GDP levels and population sizes for the year 2021.(International Monetary Fund)</li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us load the necessary code packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib as mpl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we will load the Olympic Games 2021 result set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "medals21 = pd.read_excel(\"ol_medal.xls\", header = 0, index_col =False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And secondly, we will obtain the IMF GDP per capita dataset with historic records ranging from the years 1980 to 2026. The future 5 years are forecasted values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp_hist = pd.read_excel(\"imf_gdp_mon.xls\" , header = 0, index_col = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>|| 3 Data Preparation <h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>|3.0 Functions </b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, I will initialise some of my custom-built functions that I will use for analysis. The below functions will help to identify numeric outliers and inconsistencies in text values.<br>\n",
    "<br>I will not describe these functions here, but rather demonstrate their implementation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Functions for outlier and missing value detection. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def nullRet(dframe, column):\n",
    "    return dframe[dframe[f'{column}'].isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def outlRet(dframe, column):\n",
    "    zsc = np.abs(scipy.stats.zscore(dframe[f\"{column}\"]))#Z-scores for each value.\n",
    "    for i in range(0,len(zsc)):\n",
    "        if zsc[i] >= 3:\n",
    "            print(f\"Row:{i},\\n\",dframe.iloc[i],\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def outlDet(dframe, field):\n",
    "    zsc = np.abs(scipy.stats.zscore(dframe[f\"{field}\"]))#Z-scores for each value.\n",
    "    count = 0 \n",
    "    for i in zsc:\n",
    "        if i >= 3:\n",
    "            count += 1\n",
    "    print(f\"{field}:{count}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def iniParse(dataFr, multivar =[], bivar =[]):\n",
    "    classes = [\"<class 'numpy.float64'>\", \"<class 'numpy.int64'>\", \"<class 'numpy.integer'>\",\"<class 'numpy.unsigned integer'>\"]\n",
    "    \n",
    "    print(\"-----Outlier count-----\\n\")\n",
    "    \n",
    "    for column in dataFr:\n",
    "        if str(type(dataFr[column][1])) in classes:\n",
    "            outlDet(dataFr, column)\n",
    "            fig=mpl.pyplot.figure() \n",
    "            sns.boxplot(x=dataFr[column],ax=fig.add_axes([0, 0, 1.5, 1]))\n",
    "            \n",
    "    \n",
    "    if len(multivar)!=0:\n",
    "        print(\"\\n-----Categorical value check-----\\n||Multiple values\\n\") \n",
    "        for column in multivar:\n",
    "            fig=mpl.pyplot.figure() \n",
    "            print(f\"\\nColumn:{column}\\nValue distribution:\\n\",sns.boxplot(list(dataFr[f\"{column}\"].value_counts()),ax=fig.add_axes([0, 0, 1.5, 1])).set_title(column))\n",
    "                \n",
    "    if len(bivar)!=0:\n",
    "        print(\"\\n-----Categorical value check-----\\n||Binary values\\n\")\n",
    "        for column in bivar:\n",
    "            print(dataFr[column].value_counts(),\"\\n\")\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>| 3.1 Medals dataset</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rank</th>\n",
       "      <th>Team/NOC</th>\n",
       "      <th>Gold</th>\n",
       "      <th>Silver</th>\n",
       "      <th>Bronze</th>\n",
       "      <th>Total</th>\n",
       "      <th>Rank by Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>39</td>\n",
       "      <td>41</td>\n",
       "      <td>33</td>\n",
       "      <td>113</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>People's Republic of China</td>\n",
       "      <td>38</td>\n",
       "      <td>32</td>\n",
       "      <td>18</td>\n",
       "      <td>88</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Japan</td>\n",
       "      <td>27</td>\n",
       "      <td>14</td>\n",
       "      <td>17</td>\n",
       "      <td>58</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Great Britain</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>65</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>ROC</td>\n",
       "      <td>20</td>\n",
       "      <td>28</td>\n",
       "      <td>23</td>\n",
       "      <td>71</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rank                    Team/NOC  Gold  Silver  Bronze  Total  \\\n",
       "0     1    United States of America    39      41      33    113   \n",
       "1     2  People's Republic of China    38      32      18     88   \n",
       "2     3                       Japan    27      14      17     58   \n",
       "3     4               Great Britain    22      21      22     65   \n",
       "4     5                         ROC    20      28      23     71   \n",
       "\n",
       "   Rank by Total  \n",
       "0              1  \n",
       "1              2  \n",
       "2              5  \n",
       "3              4  \n",
       "4              3  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "medals21.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although the Olympic medals dataset is pre-processed, we will nevertheless carry out a brief inspection of it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 93 entries, 0 to 92\n",
      "Data columns (total 7 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   Rank           93 non-null     int64 \n",
      " 1   Team/NOC       93 non-null     object\n",
      " 2   Gold           93 non-null     int64 \n",
      " 3   Silver         93 non-null     int64 \n",
      " 4   Bronze         93 non-null     int64 \n",
      " 5   Total          93 non-null     int64 \n",
      " 6   Rank by Total  93 non-null     int64 \n",
      "dtypes: int64(6), object(1)\n",
      "memory usage: 5.2+ KB\n"
     ]
    }
   ],
   "source": [
    "medals21.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data types are correct and no missing values detected."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us check for any outliers and string value errors. You will notice here boxplots for both numeric and string fields. The latter reflects the frequency distribution of the string values in the dataset; outliers on the boxplots indicate potential typing or duplication errors. For example, a value may appear too frequent, or a value appears twice where it can be entered only once."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----Outlier count-----\n",
      "\n",
      "Rank:0\n",
      "Gold:3\n",
      "Silver:3\n",
      "Bronze:2\n",
      "Total:3\n",
      "Rank by Total:0\n",
      "\n",
      "-----Categorical value check-----\n",
      "||Multiple values\n",
      "\n",
      "\n",
      "Column:Team/NOC\n",
      "Value distribution:\n",
      " Text(0.5, 1.0, 'Team/NOC')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\User\\AppData\\Roaming\\Python\\Python38\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "iniParse(medals21, multivar=[\"Team/NOC\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although there seem to be some numerical outliers in the dataset, we are aware of their cause - some Teams (US, UK, Japan, etc) scored significantly higher compared to the average result in the table. <br><br>\n",
    "The boxplot above shows the value distribution in the \"Team\" column. The line over \"1\" indicates that each team was listed only once - which is correct. A different shape of the boxplot would have indicated an error (duplication).\t\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hence, the medals21 dataset is ready for analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>| 3.2 GDP dataset </h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>1980</th>\n",
       "      <th>1981</th>\n",
       "      <th>1982</th>\n",
       "      <th>1983</th>\n",
       "      <th>1984</th>\n",
       "      <th>1985</th>\n",
       "      <th>1986</th>\n",
       "      <th>1987</th>\n",
       "      <th>1988</th>\n",
       "      <th>...</th>\n",
       "      <th>2017</th>\n",
       "      <th>2018</th>\n",
       "      <th>2019</th>\n",
       "      <th>2020</th>\n",
       "      <th>2021</th>\n",
       "      <th>2022</th>\n",
       "      <th>2023</th>\n",
       "      <th>2024</th>\n",
       "      <th>2025</th>\n",
       "      <th>2026</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2515.553</td>\n",
       "      <td>2449.860</td>\n",
       "      <td>2542.853</td>\n",
       "      <td>2390.024</td>\n",
       "      <td>2474.017</td>\n",
       "      <td>2585.022</td>\n",
       "      <td>2700.330</td>\n",
       "      <td>2802.908</td>\n",
       "      <td>2905.832</td>\n",
       "      <td>3009.579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2157.741</td>\n",
       "      <td>2447.005</td>\n",
       "      <td>2617.639</td>\n",
       "      <td>2692.366</td>\n",
       "      <td>2786.071</td>\n",
       "      <td>2773.464</td>\n",
       "      <td>2930.535</td>\n",
       "      <td>2920.091</td>\n",
       "      <td>2925.035</td>\n",
       "      <td>...</td>\n",
       "      <td>13088.307</td>\n",
       "      <td>13982.669</td>\n",
       "      <td>14534.109</td>\n",
       "      <td>14218.106</td>\n",
       "      <td>15225.332</td>\n",
       "      <td>16218.619</td>\n",
       "      <td>17276.354</td>\n",
       "      <td>18284.506</td>\n",
       "      <td>19327.235</td>\n",
       "      <td>20411.603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>4813.287</td>\n",
       "      <td>5263.191</td>\n",
       "      <td>5761.055</td>\n",
       "      <td>6109.429</td>\n",
       "      <td>6476.331</td>\n",
       "      <td>6729.559</td>\n",
       "      <td>6671.009</td>\n",
       "      <td>6614.098</td>\n",
       "      <td>6522.140</td>\n",
       "      <td>...</td>\n",
       "      <td>11644.063</td>\n",
       "      <td>11823.841</td>\n",
       "      <td>11894.859</td>\n",
       "      <td>11112.187</td>\n",
       "      <td>11432.747</td>\n",
       "      <td>11809.719</td>\n",
       "      <td>12008.996</td>\n",
       "      <td>12188.341</td>\n",
       "      <td>12366.023</td>\n",
       "      <td>12546.820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Angola</td>\n",
       "      <td>1223.555</td>\n",
       "      <td>1246.691</td>\n",
       "      <td>1289.604</td>\n",
       "      <td>1360.769</td>\n",
       "      <td>1455.972</td>\n",
       "      <td>1379.590</td>\n",
       "      <td>1407.950</td>\n",
       "      <td>1464.258</td>\n",
       "      <td>1566.377</td>\n",
       "      <td>...</td>\n",
       "      <td>7681.958</td>\n",
       "      <td>7478.853</td>\n",
       "      <td>7346.304</td>\n",
       "      <td>6931.862</td>\n",
       "      <td>6878.133</td>\n",
       "      <td>6991.534</td>\n",
       "      <td>7180.887</td>\n",
       "      <td>7384.959</td>\n",
       "      <td>7594.693</td>\n",
       "      <td>7791.721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>4001.414</td>\n",
       "      <td>4583.000</td>\n",
       "      <td>4918.495</td>\n",
       "      <td>5463.894</td>\n",
       "      <td>6338.636</td>\n",
       "      <td>7158.760</td>\n",
       "      <td>8285.808</td>\n",
       "      <td>9213.236</td>\n",
       "      <td>10187.195</td>\n",
       "      <td>...</td>\n",
       "      <td>20190.631</td>\n",
       "      <td>21777.631</td>\n",
       "      <td>22567.841</td>\n",
       "      <td>18618.349</td>\n",
       "      <td>18125.184</td>\n",
       "      <td>20442.328</td>\n",
       "      <td>21905.392</td>\n",
       "      <td>23359.532</td>\n",
       "      <td>24420.307</td>\n",
       "      <td>25280.748</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Country      1980      1981      1982      1983      1984  \\\n",
       "0          Afghanistan       NaN       NaN       NaN       NaN       NaN   \n",
       "1              Albania  2157.741  2447.005  2617.639  2692.366  2786.071   \n",
       "2              Algeria  4813.287  5263.191  5761.055  6109.429  6476.331   \n",
       "3               Angola  1223.555  1246.691  1289.604  1360.769  1455.972   \n",
       "4  Antigua and Barbuda  4001.414  4583.000  4918.495  5463.894  6338.636   \n",
       "\n",
       "       1985      1986      1987       1988  ...       2017       2018  \\\n",
       "0       NaN       NaN       NaN        NaN  ...   2515.553   2449.860   \n",
       "1  2773.464  2930.535  2920.091   2925.035  ...  13088.307  13982.669   \n",
       "2  6729.559  6671.009  6614.098   6522.140  ...  11644.063  11823.841   \n",
       "3  1379.590  1407.950  1464.258   1566.377  ...   7681.958   7478.853   \n",
       "4  7158.760  8285.808  9213.236  10187.195  ...  20190.631  21777.631   \n",
       "\n",
       "        2019       2020       2021       2022       2023       2024  \\\n",
       "0   2542.853   2390.024   2474.017   2585.022   2700.330   2802.908   \n",
       "1  14534.109  14218.106  15225.332  16218.619  17276.354  18284.506   \n",
       "2  11894.859  11112.187  11432.747  11809.719  12008.996  12188.341   \n",
       "3   7346.304   6931.862   6878.133   6991.534   7180.887   7384.959   \n",
       "4  22567.841  18618.349  18125.184  20442.328  21905.392  23359.532   \n",
       "\n",
       "        2025       2026  \n",
       "0   2905.832   3009.579  \n",
       "1  19327.235  20411.603  \n",
       "2  12366.023  12546.820  \n",
       "3   7594.693   7791.721  \n",
       "4  24420.307  25280.748  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp_hist.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For now, we will narrow down the observations in the GDP dataset to just the year 2021. Column \"2021\" will be renamed to \"GDP\". "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp_hist.rename(columns={2021:\"GDP\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp21 = gdp_hist[[\"Country\",\"GDP\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2474.017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>15225.332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>11432.747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Angola</td>\n",
       "      <td>6878.133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>18125.184</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Country        GDP\n",
       "0          Afghanistan   2474.017\n",
       "1              Albania  15225.332\n",
       "2              Algeria  11432.747\n",
       "3               Angola   6878.133\n",
       "4  Antigua and Barbuda  18125.184"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp21.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below we will search for errors in the columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Country     object\n",
       "GDP        float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp21.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data types seem to be correct. Let us check if there are any missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp21['Country'].isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp21[\"GDP\"].isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Three missing values have been found in the GDP column. Let us check, for which countries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Country, GDP]\n",
       "Index: []"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nullRet(gdp21,\"GDP\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As it appears, Syria, Venezuela and Lebanon have no records in the GDP field.<br><br>\n",
    "According to <a href=\"https://tradingeconomics.com/\">tradingeconomics.com</a>, the forecasted GDP per capita values for these countries are as follows.<br><br>\n",
    "Venezuela= 9500.00 USD<br>\n",
    "Syria    =  870.00 USD<br>\n",
    "Lebanon  = 6100.00 USD<br>\n",
    "<br> Let us insert these values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp_hist.loc[gdp21['Country'] == \"Venezuela\", 'GDP'] = 9500.00"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp_hist.loc[gdp21['Country'] == \"Syria\", 'GDP'] = 870.00\n",
    "gdp_hist.loc[gdp21['Country'] == \"Lebanon\", 'GDP'] = 6100.00"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>6100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Country     GDP\n",
       "95  Lebanon  6100.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>Syria</td>\n",
       "      <td>870.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Country    GDP\n",
       "167   Syria  870.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>189</th>\n",
       "      <td>Venezuela</td>\n",
       "      <td>9500.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Country     GDP\n",
       "189  Venezuela  9500.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(gdp21.loc[gdp21['Country'] == \"Lebanon\"])\n",
    "display(gdp21.loc[gdp21['Country'] == \"Syria\"])\n",
    "display(gdp21.loc[gdp21['Country'] == \"Venezuela\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Having filled the missing values, let's have a quick analysis of the resulting dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----Outlier count-----\n",
      "\n",
      "GDP:5\n",
      "\n",
      "-----Categorical value check-----\n",
      "||Multiple values\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\User\\AppData\\Roaming\\Python\\Python38\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Column:Country\n",
      "Value distribution:\n",
      " Text(0.5, 1.0, 'Country')\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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x4zM7n5dd5/T3eeceeaZq5gJAIBtznY5AADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjRCYAAONEJgAA40QmAADjdq17AIDtpqrWPQLAlicyATbo5JNPXvcIAFue7XIAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxolMAADGiUwAAMaJTAAAxu1a9wAA280FF1yw7hEAtjyRCbBBL37xi9c9AsCWZ7scAIBxIhMAgHEiEwCAcSITAIBxIhMAgHEiEwCAcSITAIBxIhMAgHEiEwCAcSITAIBxIhMAgHEiEwCAcSITAIBxIhMAgHEiEwCAcSITAIBxIhMAgHEiEwCAcSITAIBxIhMAgHEiEwCAcSITAIBxIhMAgHEiEwCAcSITAIBxIhMAgHEiEwCAcdXdd/3BVQeS3Lh549zt7U5y27qHYJx13Zms685kXXcea7r5HtjdZx56cEORyeaqqv3dfc6652CWdd2ZrOvOZF13Hmu6PrbLAQAYJzIBABgnMreW1617ADaFdd2ZrOvOZF13Hmu6Jn4mEwCAca5kAgAwTmSuSFVdUFX/VlU3VNVvHub8A6vqfVX1sap6f1U94KBzZ1XVe6rq01X1qaras9LhOawTXNNXV9Unl2v6B1VVq52eI6mq11fVl6rqE0c4X8s1u2G5tj9+0LnnVNVnlx/PWd3UHMvxrmtVPbqqrlu+Xz9WVU9b7eQcyYm8V5fn71tVN1XVH65m4rsfkbkCVXXPJFcmuTDJ2Ul+parOPuRhv5/k6u5+ZJLLk7zqoHNXJ3lNdz88yblJvrT5U3M0J7KmVfVTSX46ySOT/GiSxyR5/IpG59iuSnLBUc5fmOShy4/nJ/njJKmq05NcluQns3ifXlZVp23qpGzEVTmOdU1yR5Jnd/cjll9/RVWdunljsgFX5fjW9E6vTHLtpkxGEpG5KucmuaG7P9fd/5vkr5JcfMhjzk7yd8tf//2d55fhsqu735sk3X17d9+xmrE5iuNe0ySd5D5J7p3kpCT3SvLFTZ+Yu6S7r03y5aM85OIsvnno7v5gklOr6geS/HyS93b3l7v7v5K8N0f/A5AVOt517e7PdPdnl89xSxbf5H/PXzrN6p3AezVV9RNJ7pfkPZs/6d2XyFyNH0ry+YM+v2l57GAfTfLk5a9/Kcn3VdUZSR6W5CtV9Zaq+nBVvWZ5FY31Ou417e7rsojOW5cf7+7uT2/yvMw50trflX8n2LqOuX5VdW4W3xz++wrn4vgddk2r6h5JXpvk0rVMdTciMreOS5M8vqo+nMXW6c1Jvp1kV5LHLs8/JsmDk1yyphnZmMOuaVU9JMnDkzwgi/8IPrGqHru+MYFjWV4Be2OS53b3d9Y9DyfkBUne2d03rXuQnW7Xuge4m7g5yQ8f9PkDlse+a7kN8+QkqapTkjylu79SVTcl+Uh3f2557q1JzkvyZyuYmyM7kTV9XpIPdvfty3PvSnJ+kn9YxeCcsCOt/c1JnnDI8fevbCpO1BHf01V13yTvSPLS5bYr28OR1vT8JI+tqhckOSXJvavq9u7+nhs4OTGuZK7Gh5I8tKoeVFX3TvL0JG87+AFVtXt5CT9JfivJ6w/62lOr6s6fAXpikk+tYGaO7kTW9D+yuMK5q6rulcVVTtvl28fbkjx7eefqeUm+2t23Jnl3kidV1WnLG36etDzG9nDYdV2+v6/J4mf73rzeEdmgw65pdz+ju8/q7j1Z7DhdLTA3hyuZK9Dd36qqF2XxB849k7y+uz9ZVZcn2d/db8viCsirqqqzuNvthcuv/XZVXZrkfcu/5ub6JH+6jt8H/+9E1jTJm7P4ZuHjWdwEtK+7377q3wOHV1VvymLtdi93Ei7L4uasdPefJHlnkouS3JDFncfPXZ77clW9MotvQJLk8u4+2k0JrNDxrmuSpyZ5XJIzquqS5bFLuvsjq5qdwzuBNWVF/B9/AAAYZ7scAIBxIhMAgHEiEwCAcSITAIBxIhMAgHEiEwCAcSITAIBxIhMAgHH/B30ewrhJgNKuAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "iniParse(gdp21, multivar = [\"Country\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Boxplot for the \"Country\" column suggests that there are no duplicates in it.<br><br>\n",
    "Whereas there are 5 outliers in the \"GDP\" column. Let us inspect the rows containing outliers by calling the outlRet function that we had defined at the beginning. In this case, it should return a total of 5 rows. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The median value of the \"GDP\" column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13801.1245"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp21[\"GDP\"].median()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The list of rows with outliers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "outlRet(gdp21,\"GDP\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These five countries, as it appeared after a search, normally top the global GDP per capita rank. The GDP values are therefore valid.<br><br>\n",
    "Now, our data is clean and ready for the next steps."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>|| 4 Analysis and the medal count adjustment <h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>| 4.1 Joining the medals and GDP datasets</h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To successfully join the datasets, we must verify that in both of them the country titles are identical. This is quite unlikely. Therefore, we will need to make some alterations before we proceed further."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us create two lists with the names of the countries in both datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "93"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "medalsCountry = list(medals21[\"Team/NOC\"])\n",
    "len(medalsCountry)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "225"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdpCountry = list(gdp21[\"Country\"])\n",
    "len(gdpCountry)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below, let us join the GDP and the medals datasets and check which countries could not be matched."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "joined = pd.merge(medals21,gdp21,how =\"left\",left_on=\"Team/NOC\", right_on=\"Country\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To simplify filtering, we will fill all missing values with the \"missing\" keyword."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "joined.fillna(\"missing\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rank</th>\n",
       "      <th>Team/NOC</th>\n",
       "      <th>Gold</th>\n",
       "      <th>Silver</th>\n",
       "      <th>Bronze</th>\n",
       "      <th>Total</th>\n",
       "      <th>Rank by Total</th>\n",
       "      <th>Country</th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>39</td>\n",
       "      <td>41</td>\n",
       "      <td>33</td>\n",
       "      <td>113</td>\n",
       "      <td>1</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>People's Republic of China</td>\n",
       "      <td>38</td>\n",
       "      <td>32</td>\n",
       "      <td>18</td>\n",
       "      <td>88</td>\n",
       "      <td>2</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Great Britain</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>65</td>\n",
       "      <td>4</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>ROC</td>\n",
       "      <td>20</td>\n",
       "      <td>28</td>\n",
       "      <td>23</td>\n",
       "      <td>71</td>\n",
       "      <td>3</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>Cuba</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>18</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>Republic of Korea</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>20</td>\n",
       "      <td>13</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>Islamic Republic of Iran</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>33</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>34</td>\n",
       "      <td>Chinese Taipei</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>22</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>42</td>\n",
       "      <td>Bahamas</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>66</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>49</td>\n",
       "      <td>Hong Kong, China</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>39</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>Slovakia</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>47</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>63</td>\n",
       "      <td>Bermuda</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>77</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>70</td>\n",
       "      <td>Kyrgyzstan</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>77</td>\n",
       "      <td>North Macedonia</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>77</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>86</td>\n",
       "      <td>Republic of Moldova</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>77</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>86</td>\n",
       "      <td>Syrian Arab Republic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>77</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Rank                    Team/NOC  Gold  Silver  Bronze  Total  \\\n",
       "0      1    United States of America    39      41      33    113   \n",
       "1      2  People's Republic of China    38      32      18     88   \n",
       "3      4               Great Britain    22      21      22     65   \n",
       "4      5                         ROC    20      28      23     71   \n",
       "13    14                        Cuba     7       3       5     15   \n",
       "15    16           Republic of Korea     6       4      10     20   \n",
       "26    27    Islamic Republic of Iran     3       2       2      7   \n",
       "33    34              Chinese Taipei     2       4       6     12   \n",
       "41    42                     Bahamas     2       0       0      2   \n",
       "48    49            Hong Kong, China     1       2       3      6   \n",
       "50    50                    Slovakia     1       2       1      4   \n",
       "62    63                     Bermuda     1       0       0      1   \n",
       "69    70                  Kyrgyzstan     0       2       1      3   \n",
       "79    77             North Macedonia     0       1       0      1   \n",
       "91    86         Republic of Moldova     0       0       1      1   \n",
       "92    86        Syrian Arab Republic     0       0       1      1   \n",
       "\n",
       "    Rank by Total  Country      GDP  \n",
       "0               1  missing  missing  \n",
       "1               2  missing  missing  \n",
       "3               4  missing  missing  \n",
       "4               3  missing  missing  \n",
       "13             18  missing  missing  \n",
       "15             13  missing  missing  \n",
       "26             33  missing  missing  \n",
       "33             22  missing  missing  \n",
       "41             66  missing  missing  \n",
       "48             39  missing  missing  \n",
       "50             47  missing  missing  \n",
       "62             77  missing  missing  \n",
       "69             60  missing  missing  \n",
       "79             77  missing  missing  \n",
       "91             77  missing  missing  \n",
       "92             77  missing  missing  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(joined.loc[joined['Country'] == \"missing\" ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below, we will create a list with the correct country titles and define a function for replacing the missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "def valChange(incorVals, corVals):\n",
    "    for i in range (0, len(incorVals)):\n",
    "        medals21.loc[medals21[\"Team/NOC\"] == incorVals[i], \"Team/NOC\"] = corVals[i]\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "missVals  = list((joined.loc[joined['GDP'] == \"missing\" ])[\"Team/NOC\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "foundVals = [\"United States\",\"China, People's Republic of\",'United Kingdom','Russian Federation',\"Cuba\",'Korea, Republic of',\n",
    "            'Iran','Taiwan Province of China','Bahamas, The','Hong Kong SAR','Slovak Republic','Bermuda','Kyrgyz Republic',\n",
    "            'North Macedonia ','Moldova','Syria']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "valChange(missVals,foundVals)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The remaining are the countries that were not inculded in the original IMF GDP dataset. We will have to enter the details for Cuba and Bermuda manually."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rank</th>\n",
       "      <th>Team/NOC</th>\n",
       "      <th>Gold</th>\n",
       "      <th>Silver</th>\n",
       "      <th>Bronze</th>\n",
       "      <th>Total</th>\n",
       "      <th>Rank by Total</th>\n",
       "      <th>Country</th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>Cuba</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>18</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>63</td>\n",
       "      <td>Bermuda</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>77</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Rank Team/NOC  Gold  Silver  Bronze  Total  Rank by Total  Country  \\\n",
       "13    14     Cuba     7       3       5     15             18  missing   \n",
       "62    63  Bermuda     1       0       0      1             77  missing   \n",
       "\n",
       "        GDP  \n",
       "13  missing  \n",
       "62  missing  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(joined.loc[joined['GDP'] == \"missing\" ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "joined.loc[joined[\"Team/NOC\"] == \"Cuba\", \"Country\"] = \"Cuba\"\n",
    "joined.loc[joined[\"Team/NOC\"] == \"Cuba\", \"GDP\"] = 9099.00"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "joined.loc[joined[\"Team/NOC\"] == \"Bermuda\", \"Country\"] = \"Bermuda\"\n",
    "joined.loc[joined[\"Team/NOC\"] == \"Bermuda\", \"GDP\"] = 117098.00"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rank</th>\n",
       "      <th>Team/NOC</th>\n",
       "      <th>Gold</th>\n",
       "      <th>Silver</th>\n",
       "      <th>Bronze</th>\n",
       "      <th>Total</th>\n",
       "      <th>Rank by Total</th>\n",
       "      <th>Country</th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Rank, Team/NOC, Gold, Silver, Bronze, Total, Rank by Total, Country, GDP]\n",
       "Index: []"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(joined.loc[joined['GDP'] == \"missing\" ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "joined.to_csv(\"medGdp_all.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have corrected all of the missing values in the dataset. For the convenience of use, let us export the \"joined\" dataframe to a new CSV file that we will load in the next chapters. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will also remove the \"Rank\", \"Rank by Total\" and the \"Country\" columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = joined.drop([\"Country\",\"Rank\",\"Rank by Total\"], axis=1, inplace = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp.to_csv(\"medGdp_ol21.csv\", index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>| 4.2 Identifying correlations in the dataset</h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Before moving on, let us check whether a country's GDP score has any influence on its Olympic performance.<br><br>\n",
    "Our initial hypothesis assumed that the Olympic performance of a team, expressed in the number of medals gained, may increase with the corresponding nation's GDP growth. To determine to what extent this is true, let us generate a scatter plot with a regression line and a correlation matrix.<br><br>\n",
    "Our objective here is to identify any obvious patterns, rather than to establish the causation.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "olJoined = pd.read_csv(\"medGdp_ol21.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = olJoined[\"GDP\"]\n",
    "y = olJoined[\"Total\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y, label=\"Medals\")\n",
    "\n",
    "plt.title(\"Medal Count and GDP Correlation\",fontdict={\"fontname\":\"Times New Roman\",\"fontsize\":20})\n",
    "plt.xlabel(\"GDP\", fontdict={\"fontname\":\"Times New Roman\",\"fontsize\":15})\n",
    "plt.ylabel(\"Medal count\", fontdict={\"fontname\":\"Times New Roman\",\"fontsize\":15})\n",
    "\n",
    "m, b = np.polyfit(x, y, 1)\n",
    "plt.plot(x, m*x + b, color=\"red\")\n",
    "\n",
    "plt.gcf().set_size_inches(10, 6)\n",
    "\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gold</th>\n",
       "      <th>Silver</th>\n",
       "      <th>Bronze</th>\n",
       "      <th>Total</th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Gold</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.929046</td>\n",
       "      <td>0.862425</td>\n",
       "      <td>0.970840</td>\n",
       "      <td>0.223821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Silver</th>\n",
       "      <td>0.929046</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.862646</td>\n",
       "      <td>0.969439</td>\n",
       "      <td>0.195923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bronze</th>\n",
       "      <td>0.862425</td>\n",
       "      <td>0.862646</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.941941</td>\n",
       "      <td>0.269629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>0.970840</td>\n",
       "      <td>0.969439</td>\n",
       "      <td>0.941941</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.238041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GDP</th>\n",
       "      <td>0.223821</td>\n",
       "      <td>0.195923</td>\n",
       "      <td>0.269629</td>\n",
       "      <td>0.238041</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Gold    Silver    Bronze     Total       GDP\n",
       "Gold    1.000000  0.929046  0.862425  0.970840  0.223821\n",
       "Silver  0.929046  1.000000  0.862646  0.969439  0.195923\n",
       "Bronze  0.862425  0.862646  1.000000  0.941941  0.269629\n",
       "Total   0.970840  0.969439  0.941941  1.000000  0.238041\n",
       "GDP     0.223821  0.195923  0.269629  0.238041  1.000000"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "olJoined.corr(method=\"pearson\")#Read from Left(increasing) to the right(incr.(-) or decr.(+))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As can be inferred from both the plot and the matrix, there is a weak relationship between the GDP score and the number of medals. This observation suggests that the GDP alone cannot predict athletic performance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>| 4.3 Adjusting the medals table</h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Having prepared are our dataset, we can move on to our main task - reranking the teams according to their GDP scores. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "fullTable = pd.read_csv(\"medGdp_all.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, for each team, we need to calculate an adjustment coefficient and then multiply the total medal count of each team by its corresponding coefficient. The coefficient is calculated by getting the rounded quotient of the given team’s GDP and the minimum GDP of the dataset. We then divide 1 by the resulting number to standardise the value. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "olJoined[\"Coefficient\"] = (1/(olJoined[\"GDP\"]/olJoined[\"GDP\"].min())).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team/NOC</th>\n",
       "      <th>Gold</th>\n",
       "      <th>Silver</th>\n",
       "      <th>Bronze</th>\n",
       "      <th>Total</th>\n",
       "      <th>GDP</th>\n",
       "      <th>Coefficient</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>United States</td>\n",
       "      <td>39</td>\n",
       "      <td>41</td>\n",
       "      <td>33</td>\n",
       "      <td>113</td>\n",
       "      <td>68308.968</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>China, People's Republic of</td>\n",
       "      <td>38</td>\n",
       "      <td>32</td>\n",
       "      <td>18</td>\n",
       "      <td>88</td>\n",
       "      <td>18931.083</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Japan</td>\n",
       "      <td>27</td>\n",
       "      <td>14</td>\n",
       "      <td>17</td>\n",
       "      <td>58</td>\n",
       "      <td>44585.172</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>65</td>\n",
       "      <td>47089.266</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Russian Federation</td>\n",
       "      <td>20</td>\n",
       "      <td>28</td>\n",
       "      <td>23</td>\n",
       "      <td>71</td>\n",
       "      <td>29485.331</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Australia</td>\n",
       "      <td>17</td>\n",
       "      <td>7</td>\n",
       "      <td>22</td>\n",
       "      <td>46</td>\n",
       "      <td>54891.328</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>10</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "      <td>36</td>\n",
       "      <td>60460.930</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>France</td>\n",
       "      <td>10</td>\n",
       "      <td>12</td>\n",
       "      <td>11</td>\n",
       "      <td>33</td>\n",
       "      <td>49492.134</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Germany</td>\n",
       "      <td>10</td>\n",
       "      <td>11</td>\n",
       "      <td>16</td>\n",
       "      <td>37</td>\n",
       "      <td>56955.572</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Italy</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>20</td>\n",
       "      <td>40</td>\n",
       "      <td>43375.679</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Team/NOC  Gold  Silver  Bronze  Total        GDP  \\\n",
       "0                United States    39      41      33    113  68308.968   \n",
       "1  China, People's Republic of    38      32      18     88  18931.083   \n",
       "2                        Japan    27      14      17     58  44585.172   \n",
       "3               United Kingdom    22      21      22     65  47089.266   \n",
       "4           Russian Federation    20      28      23     71  29485.331   \n",
       "5                    Australia    17       7      22     46  54891.328   \n",
       "6                  Netherlands    10      12      14     36  60460.930   \n",
       "7                       France    10      12      11     33  49492.134   \n",
       "8                      Germany    10      11      16     37  56955.572   \n",
       "9                        Italy    10      10      20     40  43375.679   \n",
       "\n",
       "   Coefficient  \n",
       "0         0.01  \n",
       "1         0.05  \n",
       "2         0.02  \n",
       "3         0.02  \n",
       "4         0.03  \n",
       "5         0.02  \n",
       "6         0.01  \n",
       "7         0.02  \n",
       "8         0.02  \n",
       "9         0.02  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "olJoined.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we can apply the coefficient to the medal count."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "olJoined[\"Adj_medals\"] = (olJoined[\"Total\"]*olJoined[\"Coefficient\"]).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team/NOC</th>\n",
       "      <th>Gold</th>\n",
       "      <th>Silver</th>\n",
       "      <th>Bronze</th>\n",
       "      <th>Total</th>\n",
       "      <th>GDP</th>\n",
       "      <th>Coefficient</th>\n",
       "      <th>Adj_medals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>United States</td>\n",
       "      <td>39</td>\n",
       "      <td>41</td>\n",
       "      <td>33</td>\n",
       "      <td>113</td>\n",
       "      <td>68308.968</td>\n",
       "      <td>0.01</td>\n",
       "      <td>1.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>China, People's Republic of</td>\n",
       "      <td>38</td>\n",
       "      <td>32</td>\n",
       "      <td>18</td>\n",
       "      <td>88</td>\n",
       "      <td>18931.083</td>\n",
       "      <td>0.05</td>\n",
       "      <td>4.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Japan</td>\n",
       "      <td>27</td>\n",
       "      <td>14</td>\n",
       "      <td>17</td>\n",
       "      <td>58</td>\n",
       "      <td>44585.172</td>\n",
       "      <td>0.02</td>\n",
       "      <td>1.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>65</td>\n",
       "      <td>47089.266</td>\n",
       "      <td>0.02</td>\n",
       "      <td>1.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Russian Federation</td>\n",
       "      <td>20</td>\n",
       "      <td>28</td>\n",
       "      <td>23</td>\n",
       "      <td>71</td>\n",
       "      <td>29485.331</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>Ghana</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5967.637</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>Grenada</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>15385.312</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>Kuwait</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>41506.862</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>Moldova</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13878.984</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>Syria</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>870.000</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>93 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Team/NOC  Gold  Silver  Bronze  Total        GDP  \\\n",
       "0                 United States    39      41      33    113  68308.968   \n",
       "1   China, People's Republic of    38      32      18     88  18931.083   \n",
       "2                         Japan    27      14      17     58  44585.172   \n",
       "3                United Kingdom    22      21      22     65  47089.266   \n",
       "4            Russian Federation    20      28      23     71  29485.331   \n",
       "..                          ...   ...     ...     ...    ...        ...   \n",
       "88                        Ghana     0       0       1      1   5967.637   \n",
       "89                      Grenada     0       0       1      1  15385.312   \n",
       "90                       Kuwait     0       0       1      1  41506.862   \n",
       "91                      Moldova     0       0       1      1  13878.984   \n",
       "92                        Syria     0       0       1      1    870.000   \n",
       "\n",
       "    Coefficient  Adj_medals  \n",
       "0          0.01        1.13  \n",
       "1          0.05        4.40  \n",
       "2          0.02        1.16  \n",
       "3          0.02        1.30  \n",
       "4          0.03        2.13  \n",
       "..          ...         ...  \n",
       "88         0.15        0.15  \n",
       "89         0.06        0.06  \n",
       "90         0.02        0.02  \n",
       "91         0.06        0.06  \n",
       "92         1.00        1.00  \n",
       "\n",
       "[93 rows x 8 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "olJoined"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team/NOC</th>\n",
       "      <th>Gold</th>\n",
       "      <th>Silver</th>\n",
       "      <th>Bronze</th>\n",
       "      <th>Total</th>\n",
       "      <th>GDP</th>\n",
       "      <th>Coefficient</th>\n",
       "      <th>Adj_medals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>China, People's Republic of</td>\n",
       "      <td>38</td>\n",
       "      <td>32</td>\n",
       "      <td>18</td>\n",
       "      <td>88</td>\n",
       "      <td>18931.083</td>\n",
       "      <td>0.05</td>\n",
       "      <td>4.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Russian Federation</td>\n",
       "      <td>20</td>\n",
       "      <td>28</td>\n",
       "      <td>23</td>\n",
       "      <td>71</td>\n",
       "      <td>29485.331</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>5274.408</td>\n",
       "      <td>0.16</td>\n",
       "      <td>1.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Cuba</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>9099.000</td>\n",
       "      <td>0.10</td>\n",
       "      <td>1.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>65</td>\n",
       "      <td>47089.266</td>\n",
       "      <td>0.02</td>\n",
       "      <td>1.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>48098.555</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>Lithuania</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>40784.265</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>Bahrain</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>50284.407</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>Puerto Rico</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>35942.780</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>Bermuda</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>117098.000</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>93 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Team/NOC  Gold  Silver  Bronze  Total         GDP  \\\n",
       "1   China, People's Republic of    38      32      18     88   18931.083   \n",
       "4            Russian Federation    20      28      23     71   29485.331   \n",
       "18                        Kenya     4       4       2     10    5274.408   \n",
       "13                         Cuba     7       3       5     15    9099.000   \n",
       "3                United Kingdom    22      21      22     65   47089.266   \n",
       "..                          ...   ...     ...     ...    ...         ...   \n",
       "77                 Saudi Arabia     0       1       0      1   48098.555   \n",
       "78                    Lithuania     0       1       0      1   40784.265   \n",
       "76                      Bahrain     0       1       0      1   50284.407   \n",
       "64                  Puerto Rico     1       0       0      1   35942.780   \n",
       "62                      Bermuda     1       0       0      1  117098.000   \n",
       "\n",
       "    Coefficient  Adj_medals  \n",
       "1          0.05        4.40  \n",
       "4          0.03        2.13  \n",
       "18         0.16        1.60  \n",
       "13         0.10        1.50  \n",
       "3          0.02        1.30  \n",
       "..          ...         ...  \n",
       "77         0.02        0.02  \n",
       "78         0.02        0.02  \n",
       "76         0.02        0.02  \n",
       "64         0.02        0.02  \n",
       "62         0.01        0.01  \n",
       "\n",
       "[93 rows x 8 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "olJoined.sort_values(\"Adj_medals\", ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, many nations, for example, Cuba, have moved quite a few positions up the rank. Nevertheless, there are teams, like the Chinese, that hold their place firmly. The latter is correct, considering that China has a moderate GDP value and at the same time a large number of medals. <br><br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For reference, we will add to our new table the old rank column from the original table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "medalsRearanged = joined = pd.merge(olJoined,fullTable[[\"Team/NOC\",\"Rank\"]],how =\"left\",left_on=\"Team/NOC\", right_on=\"Team/NOC\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "sortingDf = medalsRearanged[[\"Team/NOC\",\"Adj_medals\"]].sort_values(\"Adj_medals\", ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "sortingDf[\"New Rank\"]=range(1,94)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "medalsRearanged = pd.merge(medalsRearanged,sortingDf[[\"Team/NOC\",\"New Rank\"]],how =\"left\",left_on=\"Team/NOC\", right_on=\"Team/NOC\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "medalsRearanged.rename(columns={\"Rank\":\"Old Rank\"},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team/NOC</th>\n",
       "      <th>Gold</th>\n",
       "      <th>Silver</th>\n",
       "      <th>Bronze</th>\n",
       "      <th>Total</th>\n",
       "      <th>GDP</th>\n",
       "      <th>Coefficient</th>\n",
       "      <th>Adj_medals</th>\n",
       "      <th>Old Rank</th>\n",
       "      <th>New Rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>China, People's Republic of</td>\n",
       "      <td>38</td>\n",
       "      <td>32</td>\n",
       "      <td>18</td>\n",
       "      <td>88</td>\n",
       "      <td>18931.083</td>\n",
       "      <td>0.05</td>\n",
       "      <td>4.40</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Russian Federation</td>\n",
       "      <td>20</td>\n",
       "      <td>28</td>\n",
       "      <td>23</td>\n",
       "      <td>71</td>\n",
       "      <td>29485.331</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.13</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>5274.408</td>\n",
       "      <td>0.16</td>\n",
       "      <td>1.60</td>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Cuba</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>9099.000</td>\n",
       "      <td>0.10</td>\n",
       "      <td>1.50</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>65</td>\n",
       "      <td>47089.266</td>\n",
       "      <td>0.02</td>\n",
       "      <td>1.30</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>48098.555</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>77</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>Lithuania</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>40784.265</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>77</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>Bahrain</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>50284.407</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>77</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>Puerto Rico</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>35942.780</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>63</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>Bermuda</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>117098.000</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>63</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>93 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Team/NOC  Gold  Silver  Bronze  Total         GDP  \\\n",
       "1   China, People's Republic of    38      32      18     88   18931.083   \n",
       "4            Russian Federation    20      28      23     71   29485.331   \n",
       "18                        Kenya     4       4       2     10    5274.408   \n",
       "13                         Cuba     7       3       5     15    9099.000   \n",
       "3                United Kingdom    22      21      22     65   47089.266   \n",
       "..                          ...   ...     ...     ...    ...         ...   \n",
       "77                 Saudi Arabia     0       1       0      1   48098.555   \n",
       "78                    Lithuania     0       1       0      1   40784.265   \n",
       "76                      Bahrain     0       1       0      1   50284.407   \n",
       "64                  Puerto Rico     1       0       0      1   35942.780   \n",
       "62                      Bermuda     1       0       0      1  117098.000   \n",
       "\n",
       "    Coefficient  Adj_medals  Old Rank  New Rank  \n",
       "1          0.05        4.40         2         1  \n",
       "4          0.03        2.13         5         2  \n",
       "18         0.16        1.60        19         3  \n",
       "13         0.10        1.50        14         4  \n",
       "3          0.02        1.30         4         5  \n",
       "..          ...         ...       ...       ...  \n",
       "77         0.02        0.02        77        89  \n",
       "78         0.02        0.02        77        90  \n",
       "76         0.02        0.02        77        91  \n",
       "64         0.02        0.02        63        92  \n",
       "62         0.01        0.01        63        93  \n",
       "\n",
       "[93 rows x 10 columns]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "medalsRearanged.sort_values(\"Adj_medals\", ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "medalsRearanged.to_csv(\"new_2021scores.csv\",index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>||Conclusion</h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By adopting the approach of the statisticians who adjusted the 2012 Olympic games score table, we have created a similar table for the 2021 Olympics. As already mentioned, there are no official ranking systems in the Olympic games. The common approach is to rank higher teams that gain more medals.<br><br>\n",
    "From a fairness perspective, the teams should be ranked according to the wealth and size of their nations. For now, let us leave these considerations down to the individual and provide the results of our analysis to whoever wants to view the matter from a different angle. \n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
