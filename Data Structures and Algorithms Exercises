{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Q1</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isWalk(adjMtr, vertLst):\n",
    "    if len(vertLst)<len(adjMtr):\n",
    "        return False\n",
    "    checkLst = [0]* len(vertLst)\n",
    "    countDown = len(adjMtr)\n",
    "    for i in range(0,len(vertLst)): \n",
    "        index = vertLst[i]\n",
    "        if i != len(vertLst)-1: #wee don't need this check for the last element. \n",
    "            if not adjMtr[index][vertLst[i+1]] ==1:\n",
    "                return False\n",
    "        if checkLst[index]!=1:#to avoid counting the same element twice\n",
    "            countDown-=1\n",
    "            checkLst[index]=1\n",
    "    if countDown == 0:\n",
    "        return True\n",
    "    else:\n",
    "        return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = [[0,1,0,1],[1,0,1,1],[0,1,0,1],[1,1,1,0]]\n",
    "vertices = [1,3,2,1,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "isWalk2(graph,vertices)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Q2</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def inRange(T,a,b):\n",
    "    CurNode=T\n",
    "    while not CurNode is None:\n",
    "        curElem = CurNode.data\n",
    "        if a<=curElem<=b:\n",
    "            #print(f\"Element:{curElem}\")\n",
    "            return True\n",
    "        elif curElem>=b:\n",
    "            CurNode=CurNode.left\n",
    "        else:\n",
    "            CurNode=CurNode.right\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Node:\n",
    "   def __init__(self, data):\n",
    "      self.left = None\n",
    "      self.right = None\n",
    "      self.data = data\n",
    "   def PrintTree(self):\n",
    "      print(self.data)\n",
    "    \n",
    "   def insert(self, data):\n",
    "      if self.data:\n",
    "            if data < self.data:\n",
    "                if self.left is None:\n",
    "                    self.left = Node(data)\n",
    "                else:\n",
    "                    self.left.insert(data)\n",
    "            elif data > self.data:\n",
    "                if self.right is None:\n",
    "                    self.right = Node(data)\n",
    "                else:\n",
    "                    self.right.insert(data)\n",
    "      else:\n",
    "         self.data = data\n",
    "\n",
    "root = Node(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Node(20)\n",
    "root.insert(15)\n",
    "root.insert(7)\n",
    "root.insert(45)\n",
    "root.insert(30)\n",
    "root.insert(20)\n",
    "root.insert(35)\n",
    "root.insert(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Node(28)\n",
    "root.insert(27)\n",
    "root.insert(25)\n",
    "root.insert(20)\n",
    "root.insert(18)\n",
    "root.insert(17)\n",
    "root.insert(14)\n",
    "root.insert(11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Node(28)\n",
    "root.insert(11)\n",
    "root.insert(14)\n",
    "root.insert(17)\n",
    "root.insert(18)\n",
    "root.insert(20)\n",
    "root.insert(25)\n",
    "root.insert(27)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = Node(28)\n",
    "root.insert(29)\n",
    "root.insert(30)\n",
    "root.insert(32)\n",
    "root.insert(35)\n",
    "root.insert(37)\n",
    "root.insert(39)\n",
    "root.insert(40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "inRange(root,5,10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Q3</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "def secLg(T):\n",
    "    curNode = T\n",
    "    prevNode = T\n",
    "    lg1  = None #largest\n",
    "    lg2  = None #second largest\n",
    "    #The direction variable checks which way to go from the ROOT node at the beginning.\n",
    "    #direction = True means that we will parse the right subtree, False-the left subtree.\n",
    "    direction = True\n",
    "    if curNode.right == None:\n",
    "        direction = False\n",
    "    check = True\n",
    "    while ((lg1==None or lg2==None) and check):\n",
    "        if curNode.right == None and not direction:\n",
    "            if lg1 == None:\n",
    "                lg1 = curNode#Root node as the largest when the tree does not have a right subtree.\n",
    "                if curNode.left != None:\n",
    "                    curNode = curNode.left\n",
    "                else:\n",
    "                    check = False\n",
    "            else:\n",
    "                lg2 = curNode#Found the largest in the left subtree.\n",
    "        elif curNode.right == None and direction:\n",
    "            if lg1 == None:\n",
    "                lg1 = curNode\n",
    "                if curNode.left != None:\n",
    "                    curNonde = curNode.left\n",
    "                else:\n",
    "                    check = False\n",
    "            else:\n",
    "                lg2 = curNode\n",
    "        else:\n",
    "            prevNode = curNode\n",
    "            curNode  = curNode.right\n",
    "\n",
    "    \n",
    "    if lg1 == None:\n",
    "        lg1 = curNode\n",
    "    if lg2 == None:\n",
    "        lg2 = prevNode\n",
    "    \n",
    "    #print(lg1.data)\n",
    "    #print(count)\n",
    "    #print(lg2.data)\n",
    "    return lg2.data           \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "45"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "secLg(root)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "root.right == None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Q4</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isCycle(adjLst):\n",
    "    labelled = [-1]*len(adjLst)\n",
    "    labelled[0] = 0\n",
    "    component = [0]\n",
    "    curIndex = 0\n",
    "    while (curIndex<len(component)):\n",
    "        curVertice = component[curIndex]\n",
    "        for i in range(0,len(adjLst[curVertice])):\n",
    "            curNeighbour = adjLst[curVertice][i]\n",
    "            if labelled[curNeighbour]!=0:\n",
    "                labelled[curNeighbour] = 0\n",
    "                component.append(curNeighbour)\n",
    "            elif labelled[curNeighbour]==0:\n",
    "                return True\n",
    "        curIndex +=1\n",
    "    return False \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isCycle(adjLst):\n",
    "    labelled = [-1]*len(adjLst) \n",
    "    q = [0]\n",
    "    while(len(q)>0):\n",
    "        curVertice = q[0]\n",
    "        print(curVertice)\n",
    "        for i in range(0,len(adjLst[curVertice])):\n",
    "            if  labelled[adjLst[curVertice][i]] == 0:\n",
    "                return True\n",
    "            else:\n",
    "                if labelled[adjLst[curVertice][i]]==-1:\n",
    "                    q.append(adjLst[curVertice][i])\n",
    "                    labelled[adjLst[curVertice][i]] = 0\n",
    "        q.pop(0)\n",
    "        labelled[curVertice]=1\n",
    "        print(q)\n",
    "        \n",
    "    return False "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isCycle(adjLst):\n",
    "    count = 0 #Variable used for the edge count\n",
    "    for i in range(0, len(adjLst)):\n",
    "        #Checking that each vertice has only two neighbours\n",
    "        if len(adjLst[i])!=2:\n",
    "            return False\n",
    "        count+=len(adjLst[i])\n",
    "    #Comparing the number of edges to the number of vertices\n",
    "    #According to the \"Handshaking Lemma\"\n",
    "    if count//2 != len(adjLst):\n",
    "        return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isCycle(graph3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph3 = [[3,1],[0,2],[3,1],[0,2]]\n",
    "graph4 = [[3,1],[0],[3],[0,2]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph5 =[[1],[0]]\n",
    "graph6 = [[1,2],[0,2],[0,1,3],[2]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph7 = [[1],[0,2,6],[1,3,4],[2,4],[2,3],[6,7],[1,5],[5]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph8= [[1,2],[0,2],[0,1]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Q5</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sameComponent(adjLst,x,y):\n",
    "    labelled = [-1]*len(adjLst)\n",
    "    labelled[x] = 0\n",
    "    component = [x]\n",
    "    curIndex = 0\n",
    "    while (curIndex<len(component)):\n",
    "        curVertice = component[curIndex]\n",
    "        for i in range(0,len(adjLst[curVertice])):\n",
    "            curNeighbour = adjLst[curVertice][i]\n",
    "            if curNeighbour == y:\n",
    "                return True\n",
    "            if labelled[curNeighbour]==-1:\n",
    "                labelled[curNeighbour] = labelled[curVertice]+1\n",
    "                component.append(curNeighbour)\n",
    "        curIndex +=1\n",
    "    return False \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph2 = [[1,3],[0,2,3],[1,3],[0,1,2],[5],[4,6],[5,7],[6]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sameComponent(graph2,4,7)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
